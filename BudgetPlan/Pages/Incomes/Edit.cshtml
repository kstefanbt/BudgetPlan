@page
@using Microsoft.AspNetCore.Components
@model BudgetPlan.Pages.Incomes.EditModel
@{
}

<br>
<h2>Edit Income</h2>

@if (Model.errorMessage.Length > 0)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <strong>@Model.errorMessage</strong>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<form autocomplete="off" method="POST">
    <input type="hidden" name="id" value="@Model.incomesInfo.Id">
    <div class="row mb-3">   
        <label class="col-sm-3 col-form-label">Month</label>
        <div class="col-sm-6">
            <input type="text" position="relative" class="form-control" name="month" id="month" value="@Model.incomesInfo.Month">
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label">Year</label>
        <div class="col-sm-6">
            <input type="text" class="form-control" name="year" id="year" value="@Model.incomesInfo.Year">
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label">Category</label>
        <div class="col-sm-6">
            <input type="text" name="category" value="@Model.incomesInfo.Category" disabled>
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label">Amount</label>
        <div class="col-sm-6">
            <input type="number" class="form-control" name="amount" value="@Model.incomesInfo.Amount" min="0" step=".01">
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label">Real values</label>
        <div class="col-sm-6">
            <input type="text" name="realValues" value="@Model.incomesInfo.RealValues" disabled>
        </div>
    </div>

    @if (Model.successMessage.Length > 0)
    {
        <div class="row mb-3">
            <div class="col-sm-9">
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <strong>@Model.successMessage</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            </div>
        </div>
    }

    

    <div class="row mb-3">
        <div class="offset-sm-3 col-sm-3 d-grid">
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>
        <div class="col-sm-3 d-grid">
            <a class="btn btn-outline-primary" href="/" role="button">Cancel</a>
        </div>
    </div>
</form>

<script>
    function autocomplete(inp, arr) {
        var currentFocus;
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            this.parentNode.appendChild(a);
            for (i = 0; i < arr.length; i++) {
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    b = document.createElement("DIV");
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";

                    b.addEventListener("click", function (e) {

                        inp.value = this.getElementsByTagName("input")[0].value;

                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });

        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                currentFocus++;
                addActive(x);
            } else if (e.keyCode == 38) {
                currentFocus--;
                addActive(x);
            } else if (e.keyCode == 13) {
                e.preventDefault();
                if (currentFocus > -1) {
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            if (!x) return false;
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }

        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

    var arr = Array.from(Array(2035).keys());
    
    autocomplete(document.getElementById("month"), ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
    autocomplete(document.getElementById("year"), arr.join().split(','));
</script>